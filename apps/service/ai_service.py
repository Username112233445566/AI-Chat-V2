import asyncio
import logging
import google.generativeai as genai
from apps.service.settings_service import get_ai_key

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

GOOGLE_API_KEY = get_ai_key()
genai.configure(api_key=GOOGLE_API_KEY)
genai_model = genai.GenerativeModel("gemini-2.0-flash")

UNIFIED_ASSISTANT_PROMPT = """
–¢—ã ‚Äî —É–º–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥—ë—Ç –¥–∏–∞–ª–æ–≥ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∞–º–∏ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
1. –û–±—â–∞–π—Å—è, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–∞—Ç-–±–æ—Ç.
2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –¥–∞—ë—Ç –∫–æ–º–∞–Ω–¥—É, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–π –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–π –º–∞—Ä–∫–µ—Ä –≤ –æ—Ç–≤–µ—Ç.

‚ö†Ô∏è –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π –º–∞—Ä–∫–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–π –∏—Ö –≤ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.

–ö–æ–º–∞–Ω–¥–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã:
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É (—Å–æ–∑–¥–∞–π, –∑–∞–ø–∏—à–∏, –¥–æ–±–∞–≤—å) ‚Üí –¥–æ–±–∞–≤—å [CREATE_TASK]
- –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É ‚Üí [UPDATE_TASK]
- –ï—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ‚Üí [DELETE_TASK]
- –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ (–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏, –æ—Ç–æ–±—Ä–∞–∑–∏ —Å–ø–∏—Å–æ–∫, —á—Ç–æ —É –º–µ–Ω—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ, –≤—ã–≤–µ–¥–∏ –∑–∞–¥–∞—á–∏, –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ —Ç.–¥.) ‚Üí [SHOW_TASKS]
- –ò–Ω–∞—á–µ ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤.

–ü—Ä–∏–º–µ—Ä—ã:
- "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É" ‚Üí –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç + [CREATE_TASK]
- "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –•" ‚Üí –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç + [DELETE_TASK]
- "–ü–æ–∫–∞–∂–∏ –º–Ω–µ –º–æ–∏ –∑–∞–¥–∞—á–∏" ‚Üí –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç + [SHOW_TASKS]
- "–ß—Ç–æ —É –º–µ–Ω—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ?" ‚Üí –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç + [SHOW_TASKS]
- "–ö–∞–∫ –¥–µ–ª–∞?" ‚Üí –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –º–∞—Ä–∫–µ—Ä–∞
"""

async def process_ai_request(user, text: str) -> tuple[str, str]:
    text_lower = text.lower().strip()

    quick_phrases = ["–≤—Å–µ –∑–∞–¥–∞—á–∏", "–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏", "–æ—Ç–æ–±—Ä–∞–∑–∏ –∑–∞–¥–∞—á–∏", "–≤—ã–≤–µ–¥–∏ –∑–∞–¥–∞—á–∏", "—á—Ç–æ —É –º–µ–Ω—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", "—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"]
    if any(phrase in text_lower for phrase in quick_phrases):
        logger.info(f"‚ö° –ë—ã—Å—Ç—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã SHOW_TASKS –¥–ª—è: {text_lower}")
        return "üìã –í–æ—Ç –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:", "[SHOW_TASKS]"

    prompt = UNIFIED_ASSISTANT_PROMPT + f"\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {text}\n–û—Ç–≤–µ—Ç:"
    try:
        loop = asyncio.get_running_loop()
        result = await loop.run_in_executor(None, lambda: genai_model.generate_content(prompt))
        full_text = result.text.strip()

        action = None
        for marker in ["[CREATE_TASK]", "[UPDATE_TASK]", "[DELETE_TASK]", "[SHOW_TASKS]"]:
            if marker in full_text:
                action = marker
                full_text = full_text.replace(marker, "").strip()
                break

        logger.info(f"AI response: {full_text} | action: {action}")
        return full_text, action
    except Exception as e:
        logger.error(f"AI error for user {user.tg_id}: {e}", exc_info=True)
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.", None