import asyncio
import logging
import google.generativeai as genai
from apps.service.settings_service import get_ai_key

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

GOOGLE_API_KEY = get_ai_key()
genai.configure(api_key=GOOGLE_API_KEY)
genai_model = genai.GenerativeModel("gemini-2.0-flash")

UNIFIED_ASSISTANT_PROMPT = """
‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Äî –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π.
‚Äî –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
‚Äî –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –º–∞—Ä–∫–µ—Ä—ã, –∫—Ä–æ–º–µ: [CREATE_TASK], [UPDATE_TASK], [DELETE_TASK], [SHOW_TASKS].
‚Äî –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–π ¬´–ë–µ–∑ —Å—Ä–æ–∫–∞¬ª, ¬´üü†¬ª –∏ –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
‚Äî –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –º–∏–Ω–∏–º—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

–¢—ã ‚Äî —É–º–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∞–º–∏ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –Ω–∏–∂–µ.

üìå –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
1. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –∑–∞–¥–∞—á—É –≤ —á—ë—Ç–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
2. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–π —Ñ—Ä–∞–∑–∞–º–∏ —Ç–∏–ø–∞ ‚Äú–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?‚Äù, ‚Äú–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?‚Äù, ‚Äú–•–æ—Ä–æ—à–æ, —É—Ç–æ—á–Ω–∏—Ç–µ‚Äù –∏ —Ç.–¥.
3. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.
4. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–µ–π (–µ—Å–ª–∏ —ç—Ç–æ CREATE/UPDATE), –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π + –º–∞—Ä–∫–µ—Ä–æ–º (–µ—Å–ª–∏ SHOW/DELETE).
5. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –ª–∏—à–Ω–∏–µ —à–∞–≥–∏, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–π —Ç–æ, —á—Ç–æ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

üì¶ –§–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏:
[—ç–º–æ–¥–∑–∏] –ó–∞–¥–∞—á–∞: [–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏]
 ¬∑ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: [üî¥ / üü† / üü¢]
 ¬∑ –°—Ä–æ–∫: [–≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º] (–∏–ª–∏ ‚Äú–ë–µ–∑ —Å—Ä–æ–∫–∞‚Äù)
 ¬∑ –û–ø–∏—Å–∞–Ω–∏–µ: [–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏]
 ¬∑ –ò—Å—Ç–æ—á–Ω–∏–∫: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ TaskMentor AI

---

üß† –ü—Ä–∏–º–µ—Ä—ã:

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É ‚Äú–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –∑–∞–≤—Ç—Ä–∞ –≤ 14:00‚Äù
–û—Ç–≤–µ—Ç:
üìû –ó–∞–¥–∞—á–∞: –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É
 ¬∑ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: üü†
 ¬∑ –°—Ä–æ–∫: 2025-05-22 14:00
 ¬∑ –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –≤ 14:00
 ¬∑ –ò—Å—Ç–æ—á–Ω–∏–∫: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ TaskMentor AI
[CREATE_TASK]

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–æ–º–µ–Ω—è–π –≤—Ä–µ–º—è —Å–≤–∏–¥–∞–Ω–∏—è –Ω–∞ 13:00
–û—Ç–≤–µ—Ç:
‚ù§Ô∏è –ó–∞–¥–∞—á–∞: –ü–æ–π—Ç–∏ –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ
 ¬∑ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: üü†
 ¬∑ –°—Ä–æ–∫: 2025-05-22 13:00
 ¬∑ –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–π—Ç–∏ –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –≤ 13:00
 ¬∑ –ò—Å—Ç–æ—á–Ω–∏–∫: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ TaskMentor AI
[UPDATE_TASK]

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
–û—Ç–≤–µ—Ç:
üìã –í–æ—Ç –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:
[SHOW_TASKS]

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É –ø—Ä–æ —Å–ø–æ—Ä—Ç
–û—Ç–≤–µ—Ç:
üóë –£–¥–∞–ª—è—é –∑–∞–¥–∞—á—É ‚Äú–ü–æ–π—Ç–∏ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª‚Äù
[DELETE_TASK]
"""

async def process_ai_request(user, text: str) -> tuple[str, str]:
    text_lower = text.lower().strip()

    quick_phrases = ["–≤—Å–µ –∑–∞–¥–∞—á–∏", "–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏", "–æ—Ç–æ–±—Ä–∞–∑–∏ –∑–∞–¥–∞—á–∏", "–≤—ã–≤–µ–¥–∏ –∑–∞–¥–∞—á–∏", "—á—Ç–æ —É –º–µ–Ω—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", "—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"]
    if any(phrase in text_lower for phrase in quick_phrases):
        logger.info(f"‚ö° –ë—ã—Å—Ç—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã SHOW_TASKS –¥–ª—è: {text_lower}")
        return "üìã –í–æ—Ç –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:", "[SHOW_TASKS]"

    prompt = UNIFIED_ASSISTANT_PROMPT + f"\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {text}\n–û—Ç–≤–µ—Ç:"
    try:
        loop = asyncio.get_running_loop()
        result = await loop.run_in_executor(None, lambda: genai_model.generate_content(prompt))
        full_text = result.text.strip()

        action = None
        for marker in ["[CREATE_TASK]", "[UPDATE_TASK]", "[DELETE_TASK]", "[SHOW_TASKS]"]:
            if marker in full_text:
                action = marker
                full_text = full_text.replace(marker, "").strip()
                break

        logger.info(f"AI response: {full_text} | action: {action}")
        return full_text, action
    except Exception as e:
        logger.error(f"AI error for user {user.tg_id}: {e}", exc_info=True)
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.", None